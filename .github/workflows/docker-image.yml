name: Build, Push, and Deploy Docker Image

on:
  push:
    branches: [ "my-feature-branch" ]
  workflow_dispatch:

jobs:
  # Job 1: Build and Push the image to Docker Hub
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: knyl2013/open-webui:latest

  # Job 2: Deploy the new image to the server
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repo so we can read the docker-compose.yml file
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Read the docker-compose.yaml file into an environment variable
      - name: Read docker-compose.yaml content
        id: compose_content
        run: |
          echo 'DOCKER_COMPOSE_CONTENT<<EOF' >> $GITHUB_ENV
          cat docker-compose.yml >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      # Step 3: Connect to server, create the necessary files, and deploy
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            # Create the project directory if it doesn't exist
            mkdir -p ~/webui_cicd
            cd ~/webui_cicd

            # --- File Creation on Server ---

            # A) Create the docker-compose.yml file.
            echo "Creating docker-compose.yml on server..."
            cat <<'EOF' > docker-compose.yml
            ${{ env.DOCKER_COMPOSE_CONTENT }}
            EOF
            
            # B) Create the .env file with secrets.
            echo "Creating .env file on server..."
            cat <<EOF > .env
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            EOF
            
            # --- Deployment Execution ---
            
            echo "Pulling latest image from Docker Hub..."
            docker compose pull
            
            echo "Starting container with new configuration..."
            docker compose up -d
            
            echo "Cleaning up old unused images..."
            docker image prune -af
            
            echo "Deployment successful!"